/**
 * Google Gemini Service Implementation
 * Handles workflow generation using Google's Gemini API
 */

import { BaseAIService } from './base-service.js';
import { AIProvider, AI_MODELS } from '../../types/ai.js';

export class GeminiService extends BaseAIService {
    constructor(apiKey, modelName = 'gemini-1.5-pro') {
        const model = AI_MODELS[modelName] || AI_MODELS['gemini-1.5-pro'];
        super(apiKey, model);
        this.provider = AIProvider.GEMINI;
        this.apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model.name}:generateContent?key=${apiKey}`;
    }

    async generateWorkflow(request) {
        try {
            await this.checkRateLimit();
            
            const startTime = Date.now();
            
            // Build the conversation context
            let conversationText = this.buildSystemPrompt(request.context) + '\n\n';
            
            // Add previous conversation context if available
            if (request.previousMessages && request.previousMessages.length > 0) {
                request.previousMessages.forEach(msg => {
                    if (msg.type !== 'system') {
                        conversationText += `${msg.type}: ${msg.content}\n\n`;
                    }
                });
            }
            
            // Add current user request
            conversationText += `User: Please generate an n8n workflow for this request: ${request.description}`;

            const requestBody = {
                contents: [{
                    parts: [{
                        text: conversationText
                    }]
                }],
                generationConfig: {
                    temperature: request.options?.temperature || 0.1,
                    maxOutputTokens: request.options?.maxTokens || 4000,
                    candidateCount: 1
                }
            };

            console.log('44agents: Sending request to Gemini API');

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                throw await this.handleApiError(response);
            }

            const result = await response.json();
            const responseTime = Date.now() - startTime;
            
            if (!result.candidates || result.candidates.length === 0) {
                throw new Error('No response generated by Gemini');
            }
            
            // Parse the response
            const content = result.candidates[0].content.parts[0].text;
            const parsedResponse = this.parseWorkflowResponse(content);
            
            // Estimate tokens and cost (Gemini doesn't provide usage in response)
            const inputTokens = this.estimateTokens(conversationText);
            const outputTokens = this.estimateTokens(content);
            const cost = this.calculateCost(inputTokens, outputTokens);
            
            // Update tracking
            this.updateRateLimit(inputTokens + outputTokens);
            this.totalCost += cost;
            
            // Update average response time
            this.averageResponseTime = this.averageResponseTime 
                ? (this.averageResponseTime + responseTime) / 2 
                : responseTime;

            console.log('44agents: Gemini workflow generation completed', {
                estimatedInputTokens: inputTokens,
                estimatedOutputTokens: outputTokens,
                estimatedCost: cost.toFixed(4),
                responseTime: `${responseTime}ms`
            });

            return {
                workflow: parsedResponse.workflow,
                explanation: parsedResponse.explanation,
                confidence: parsedResponse.confidence || 0.9,
                estimatedTokens: inputTokens + outputTokens,
                cost: cost
            };

        } catch (error) {
            this.errorCount = (this.errorCount || 0) + 1;
            console.error('44agents: Gemini API error:', error);
            throw this.formatError(error, this.provider);
        }
    }

    parseWorkflowResponse(content) {
        try {
            // Try to extract JSON from the response
            let jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
            if (!jsonMatch) {
                jsonMatch = content.match(/\{[\s\S]*\}/);
            }
            
            if (jsonMatch) {
                const parsed = JSON.parse(jsonMatch[1] || jsonMatch[0]);
                
                // Validate the response structure
                if (!parsed.workflow || !parsed.explanation) {
                    throw new Error('Invalid response format from Gemini');
                }
                
                // Ensure workflow has required fields
                if (!parsed.workflow.id) {
                    parsed.workflow.id = this.generateWorkflowId();
                }
                
                if (!parsed.workflow.nodes) {
                    throw new Error('Workflow must contain nodes array');
                }
                
                if (!parsed.workflow.connections) {
                    parsed.workflow.connections = {};
                }
                
                if (!parsed.workflow.metadata) {
                    parsed.workflow.metadata = {
                        generatedBy: '44agents',
                        aiModel: this.model.name,
                        timestamp: new Date().toISOString(),
                        version: '1.0'
                    };
                }
                
                return parsed;
            } else {
                throw new Error('No JSON found in Gemini response');
            }
        } catch (error) {
            console.error('44agents: Failed to parse Gemini response:', error);
            console.log('Raw response:', content);
            
            // Fallback: create a simple workflow with the explanation
            return {
                workflow: {
                    id: this.generateWorkflowId(),
                    name: 'Generated Workflow',
                    description: 'Workflow generated by Gemini',
                    nodes: [{
                        id: 'start',
                        name: 'Manual Trigger',
                        type: 'n8n-nodes-base.manualTrigger',
                        typeVersion: 1,
                        position: [240, 300],
                        parameters: {}
                    }],
                    connections: {},
                    metadata: {
                        generatedBy: '44agents',
                        aiModel: this.model.name,
                        timestamp: new Date().toISOString(),
                        version: '1.0',
                        parseError: true
                    }
                },
                explanation: `I encountered an error parsing the workflow response. Here's what Gemini said:\n\n${content}`,
                confidence: 0.1
            };
        }
    }

    async validateApiKey(apiKey) {
        try {
            const testUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`;
            
            const response = await fetch(testUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: 'Test'
                        }]
                    }],
                    generationConfig: {
                        maxOutputTokens: 1
                    }
                })
            });

            return response.ok;
        } catch (error) {
            console.error('44agents: Gemini API key validation failed:', error);
            return false;
        }
    }

    async handleApiError(response) {
        const errorData = await response.json().catch(() => ({}));
        
        const error = new Error(errorData.error?.message || `HTTP ${response.status}`);
        error.status = response.status;
        error.code = errorData.error?.code;
        
        if (response.status === 429) {
            error.retryAfter = 60; // Gemini doesn't provide retry-after header
        }
        
        return error;
    }

    generateWorkflowId() {
        return 'workflow_' + Date.now() + '_' + Math.random().toString(36).substr(2, 8);
    }

    // Override base method to include Gemini-specific prompting
    buildSystemPrompt(context = {}) {
        let prompt = super.buildSystemPrompt(context);
        
        prompt += `\n\nAs Gemini, you have access to extensive knowledge about automation and workflow design. Apply these principles:
1. Leverage your understanding of complex business processes
2. Create workflows that are both powerful and easy to understand  
3. Implement robust error handling and data validation
4. Consider scalability and performance implications
5. Provide insights into workflow optimization opportunities

Generate precise, well-structured JSON responses that can be directly imported into n8n.`;

        return prompt;
    }
}